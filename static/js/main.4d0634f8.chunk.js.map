{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","todos","selectedTodoId","selectTodo","className","map","id","title","completed","classNames","type","onClick","TodoFilter","value","onReset","setQuery","onChange","filterType","setFilterType","onChangeFilterType","event","filter","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","selectedTodo","onSelect","useState","user","setUser","useEffect","fetchUser","a","selectedUser","Error","href","email","name","App","setTodos","setUserId","query","All","find","todo","lowerCaseQuery","toLowerCase","fetchTodos","useCallback","todosFromServer","visibleTodos","useMemo","allTodos","includes","Completed","Active","length","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,2EAAAA,K,UAAAA,E,sBAAAA,E,iBAAAA,M,gCCUCC,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,eACAC,EACI,EADJA,WAEA,OACE,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,UAAd,OACT,qBAAI,UAAQ,OAAOJ,UAAU,4BAA7B,UACE,oBAAIA,UAAU,eAAd,SAA8BE,IAE9B,oBAAIF,UAAU,eAAd,SACGI,GACC,sBAAMJ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UACDK,IAAW,CACT,mBAAoBD,EACpB,mBAAoBA,IAHxB,SAOGD,MAIL,oBAAIH,UAAU,8BAAd,SACGF,IAAmBI,EAEhB,wBACE,UAAQ,eACRF,UAAU,iBACVM,KAAK,SACLC,QAAS,kBAAMR,EAAW,IAJ5B,SAME,sBAAMC,UAAU,OAAhB,SACE,mBAAGA,UAAU,yBAIjB,wBACE,UAAQ,eACRA,UAAU,SACVM,KAAK,SACLC,QAAS,kBAAMR,EAAWG,IAJ5B,SAME,sBAAMF,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBA5CqCE,YCtB3DM,EAA8B,SAAC,GAQtC,IANFC,EAMC,EANDA,MACAC,EAKC,EALDA,QACUC,EAIT,EAJDC,SACAC,EAGC,EAHDA,WACoBC,EAEnB,EAFDC,mBASF,OACE,uBAAMf,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRS,MAAOI,EACPD,SAbiB,SAACI,GAC1B,IAAMC,EAASD,EAAME,OAAOT,MAE5BK,EAAcG,IAOR,UAKE,wBAAQR,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGT,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRM,KAAK,OACLN,UAAU,QACVmB,YAAY,YACZV,MAAOA,EACPG,SAAU,SAAAI,GAAK,OAAIL,EAASK,EAAME,OAAOT,UAE3C,sBAAMT,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdS,GACC,sBAAMT,UAAU,gBAAgBoB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRf,KAAK,SACLN,UAAU,SACVO,QAASG,aC1DVY,G,MAAmB,kBAC9B,qBAAKtB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSnB,SAASuB,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAEMC,EAAU,SAACC,GAAD,OAAoBZ,EAAG,iBAAiBY,KCdlDC,EAA6B,SAAC,GAGpC,IAFLC,EAEI,EAFJA,aACUtC,EACN,EADJuC,SAGEpC,EAIEmC,EAJFnC,GACAC,EAGEkC,EAHFlC,MACAC,EAEEiC,EAFFjC,UACA+B,EACEE,EADFF,OAEF,EAAwBI,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,4BAAAC,EAAA,+EAEaV,EAAQC,GAFrB,OAERU,EAFQ,OAIdJ,EAAQI,GAJM,sDAMR,IAAIC,MAAM,8BANF,yDAAH,qDAUfH,MACC,CAACR,IAMJ,OACE,sBAAKnC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbwC,EAGA,sBAAKxC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,sBACEA,UAAU,0CACV,UAAQ,eAFV,mBAKGE,KAIH,wBACEI,KAAK,SACLN,UAAU,SACV,UAAQ,cACRO,QA1BO,WACjBR,EAAW,SA6BL,sBAAKC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGG,IAGH,oBAAGH,UAAU,QAAQ,UAAQ,aAA7B,UACE,wBACEA,UAAWK,IAAW,CACpB,mBAAoBD,EACpB,mBAAoBA,IAHxB,SAMGA,EACG,OACA,YAGL,OAED,mBAAG2C,KAAI,iBAAYP,EAAKQ,OAAxB,SACGR,EAAKS,eAvCmBT,EAAKtC,IAFtC,cAAC,EAAD,QChCKgD,EAAgB,WAC3B,MAA0BX,mBAAiB,IAA3C,mBAAO1C,EAAP,KAAcsD,EAAd,KACA,EAA4BZ,mBAAS,GAArC,mBAAOJ,EAAP,KAAeiB,EAAf,KACA,EAA0Bb,mBAAS,IAAnC,mBAAOc,EAAP,KAAc1C,EAAd,KACA,EAAoC4B,mBAAS5C,EAAW2D,KAAxD,mBAAOzC,EAAP,KAAmBC,EAAnB,KACMuB,EAAexC,EAAM0D,MAAK,SAAAC,GAAI,OAAIA,EAAKtD,KAAOiC,KAC9CsB,EAAiBJ,EAAMK,cAEvBC,EAAaC,sBAAW,sBAAC,4BAAAhB,EAAA,+EFCHrB,EAAY,UEDT,OAErBsC,EAFqB,OAI3BV,EAASU,GAJkB,sDAMrB,IAAIf,MAAM,6BANW,yDAQ5B,IAIGgB,EAAeC,mBAAQ,WAC3B,OAAOlE,EAAMoB,QAAO,SAAAuC,GAClB,IAAMQ,EAAWR,EAAKrD,MAAMuD,cAAcO,SAASR,GAEnD,OAAQ5C,GACN,KAAKlB,EAAW2D,IACd,OAAOU,EAET,KAAKrE,EAAWuE,UACd,OAAOF,GAAYR,EAAKpD,UAE1B,KAAKT,EAAWwE,OACd,OAAOH,IAAaR,EAAKpD,UAE3B,QACE,OAAOP,QAGZ,CAACA,EAAOwD,EAAOxC,IAMlB,OAJA6B,qBAAU,WACRiB,MACC,CAACA,IAGF,qCACE,qBAAK3D,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACES,MAAO4C,EACP3C,QApCE,kBAAMC,EAAS,KAqCjBC,SAAUD,EACVI,mBAAoB,SAACE,GAAD,OAAYH,EAAcG,IAC9CJ,WAAYA,MAIhB,qBAAKb,UAAU,QAAf,SACGH,EAAMuE,OAAS,EAEZ,cAAC,EAAD,CACEvE,MAAOiE,EACPhE,eAAgBqC,EAChBpC,WAAY,SAACG,GAAD,OAAQkD,EAAUlD,MAIhC,cAAC,EAAD,aAOXmC,GACC,cAAC,EAAD,CACEA,aAAcA,EACdC,SAAU,SAACpC,GAAD,OAAQkD,EAAUlD,UC7FtCmE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4d0634f8.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number,\n  selectTodo: (id: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  selectTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({ id, title, completed }) => (\n          <tr data-cy=\"todo\" className=\"has-background-info-white\" key={id}>\n            <td className=\"is-vcentered\">{id}</td>\n\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={\n                classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })\n              }\n              >\n                {title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {selectedTodoId === id\n                ? (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button is-link\"\n                    type=\"button\"\n                    onClick={() => selectTodo(0)}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => selectTodo(id)}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  value: string,\n  onReset: () => void,\n  onChange: (query: string) => void\n  filterType: FilterType,\n  onChangeFilterType: (filterType: FilterType) => void\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    value,\n    onReset,\n    onChange: setQuery,\n    filterType,\n    onChangeFilterType: setFilterType,\n  },\n) => {\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const filter = event.target.value as FilterType;\n\n    setFilterType(filter);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={value}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {value && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo,\n  onSelect: (id: number) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onSelect: selectTodo,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = selectedTodo;\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const selectedUser = await getUser(userId);\n\n        setUser(selectedUser);\n      } catch (error) {\n        throw new Error('Error while selecting user');\n      }\n    };\n\n    fetchUser();\n  }, [userId]);\n\n  const closeModal = () => {\n    selectTodo(0);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\" key={user.id}>\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n              >\n                {completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useEffect, useState, useMemo, useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { FilterType } from './types/FilterType';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [filterType, setFilterType] = useState(FilterType.All);\n  const selectedTodo = todos.find(todo => todo.id === userId);\n  const lowerCaseQuery = query.toLowerCase();\n\n  const fetchTodos = useCallback(async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n    } catch (error) {\n      throw new Error('Error while loading todos');\n    }\n  }, []);\n\n  const onReset = () => setQuery('');\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const allTodos = todo.title.toLowerCase().includes(lowerCaseQuery);\n\n      switch (filterType) {\n        case FilterType.All:\n          return allTodos;\n\n        case FilterType.Completed:\n          return allTodos && todo.completed;\n\n        case FilterType.Active:\n          return allTodos && !todo.completed;\n\n        default:\n          return todos;\n      }\n    });\n  }, [todos, query, filterType]);\n\n  useEffect(() => {\n    fetchTodos();\n  }, [fetchTodos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                value={query}\n                onReset={onReset}\n                onChange={setQuery}\n                onChangeFilterType={(filter) => setFilterType(filter)}\n                filterType={filterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={userId}\n                    selectTodo={(id) => setUserId(id)}\n                  />\n                )\n                : (\n                  <Loader />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onSelect={(id) => setUserId(id)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}